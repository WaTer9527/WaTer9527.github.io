---
layout: post
title:  "量化代码的六种必要方式"
date:   2016-04-30 01:20:31 +0800
categories: blog
tags: Programmer
author: 王涛
---

**本文为译文，原文地址：[https://blog.newrelic.com/2014/12/16/quantify-your-code/](https://blog.newrelic.com/2014/12/16/quantify-your-code/)**

商人逐利：他们不是很关心你做了什么，而是关心你做了多少，有多大价值，重结果不重过程。

一些职业的工作者可以很轻松的量化他们的工作，像销售人员可以直接使用销售业绩来量化，而许多其他领域也都有清晰的量化规范。

然而，对于软件开发人员和其他一些技术角色，并没有一个简单直接的解决方案来量化工作。但是，有效的量化又是非常重要的，不仅在求职中，而且会体现在软件工程师生涯的方方面面：绩效评估、和上级的有效沟通、与非技术职位的高效协作、为组织带来的贡献。

![带刻度的杯子]({{ site.url }}/assets/images/cup.jpg)

那么该如何衡量工作成果的价值呢？应用可伸缩，可监控，或者其他的支持？下面是New Relic使用的方法，同时也是行业中的最优方法：

“我喜欢从处境、行动和结果三个方面来衡量工作成果”，New Relic的技术招聘专员Merilee Krebs说道：“分别是，要解决的问题是什么？提出哪些独到的解决方法？最终带来了哪些改进？”。

实际中是什么样的呢？可以扪心自问几个问题：你增加的监控和测试代码有没有减少问题反馈？这才是目的所在。你有没有在项目计划之前完成项目？这是炫耀的资本。你贡献的代码和公司的战略目标是否一致？应该一致。你所做的产品是否高于行业的传统标准？这是可以量化的。

如果你觉得这些标准不近人情，那很正常-大部分程序员并不是生来就会销售和营销。如果会的话，他们可能已经从事市场和销售的工作了。所以，仔细考虑下这六种量化程序员工作的方式吧？

## 1.常用百分比思想

程序员可能并不总是能够直接与收入或者利润挂钩，但是这并不意味着不能使用数字量化工作。应该考虑使用百分比，而不是货币。

“我喜欢观察变化的百分比，像项目更新后的百分比提高，”Krebs说。“你所做的工作产生了什么影响？前后是否有量化的提高？如果是的话，使用百分比或者其他数字化的形式表达出来。”

## 2.涉足开源项目

Tom Hart，汤姆•哈特，高科技猎头公司[Eliassen](http://www.eliassen.com/)集团的COO（首席运营官）和CMO（首席营销官），建议开发人员或者相关的角色应该多参与到开源项目中去，这不仅可以锻炼适合市场需求的技能，而且可以留下使用这些技能的可量化记录，从而得到你的工作习惯。

“参与开源项目，您可以与您的同行交流，得到对自己工作的反馈，并不断地得到对自己想法和技能的评价，”Hart说。“对于正在挖人的雇主来说，这些开源项目是很好的评价一个程序员的编程技巧的方式，因为他的每次提交都会被其他程序员仔细检查，人民的眼睛是雪亮的。”

哈特建议寻找机会加入开源组织自由软件基金会（[Free Software Foundation](http://www.fsf.org/)）、[Open Knowledge Foundation](https://okfn.org/)和the [Open Source Initiative](https://opensource.org/)。可以参考我站的博文：如何打造优秀的开源项目（[what makes a great open source contribution](https://blog.newrelic.com/2014/11/05/open-source-contribution/)）、优秀开源贡献者的必备特征（[the essential traits of a great open source contributor](https://blog.newrelic.com/2014/10/21/open-source-contributors/)）。

广泛的分享技术知识也是有效的。拥有活跃的github提交记录、在社交媒体上传播行业知识、在会议上发表演讲等都能证明你的热情和和贡献。

## 3.重结果，更重过程

许多时候不只完工的产品，过程同样很重要，尤其是在如今变化已是常态、应用几乎不会达到传统意义上的“完成”的背景下，DevOps和敏捷开发理论大行其道。这应该会影响到你对工作的量化和报告。

在[A List Apart](http://alistapart.com/blog/post/show-your-work-demonstrating-progress-on-your-projects)的文章中，Eileen Webb描述了一个越来越普遍的一个可能的误解：许多时候客户或者其他的相关人员是看不出来项目在更新的-可能开发者已经做了折磨人的代码优化（code calisthenics）。

为了应对这种情况，Webb建议项目团队做周期性的沟通会来确定“视觉层面问题（visual issues）”的优先级-那些会直接影响前端界面的代码。“通过直接处理这种明显的表面问题（the visually obvious issues），我们使相关人员直接感受到了项目进度，而这可以准确反应工作量，” Webb写到。

## 4.坚持写工作日志

如果你想展现你和你的应用所体现的价值，那么你需要一些方式来记录你的努力。在文章[Leveling Up](http://peterlyons.com/leveling-up)中，经验丰富的软件开发者（veteran software developer）Peter Lyons说到：最起码要有.TXT的文本文件-他举了个例子-这样就可以向领导汇报项目进度，在绩效考核时列出所有工作而不至于遗忘。

## 5.对技术和业务人员区别对待

Lyons还建议在向管理人员、团队成员、其他相关人员发送邮件时使用两种不同的格式，尤其是收件人中包含非技术的管理人员时：首先，简短地介绍下项目的进度，避免使用技术术语。然后，为想了解和懂技术的人提供技术细节说明。而其他人在这也可以停止阅读了，避免浪费他人时间。

## 6.收集评价

开发人员量化成就的另外一种方式就是让他人代劳。如果你的某项特殊技能或成就被大家认可，确保将这些评价分享出来。Krebs提醒领英是很好的一个用来收集和交流这种反馈的社交工具。“如果许多人都对你表示了肯定，在个人介绍中就可以写：同行公认为X，”她说“甚至可以把具体的数据和评论分享一下”。

最后，请记住，即使最完美的数字也难以涵盖程序员专业价值的所有方面。在求职的过程中，花费一些时间来写一下个人的求职信。“我们的人事经理很看重求职信，会阅读它，”Krebs最后说道：“在New Relic，许多岗位甚至对求职信的内容有明确要求。”